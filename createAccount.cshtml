@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Create Account";

    var email = "";
    var password = "";
    


    Validation.RequireField("email", "You must specify an email address.");
    Validation.RequireField("password", "Password cannot be blank.");

    if (IsPost)
    {
        AntiForgery.Validate();
        email = Request.Form["email"];
        password = Request.Form["password"];


        if (Validation.IsValid())
        {
            var db = Database.Open("MySQLDB");

            // Check if user already exists
            var user = db.QuerySingle("SELECT email FROM users WHERE LOWER(email) = LOWER(@0)", email);

            if(user == null)
            {
                // Insert email into the profile table
                db.Execute("INSERT INTO users (email) VALUES (@0)", email);
                
            }
            else
            {
                // User already exists
                ModelState.AddFormError("Email address is already in use.");
            }

        }
    }

}


    
<div class=" container">
    <form method="POST" action="">
        @AntiForgery.GetHtml()
        @* If at least one validation error exists, notify the user *@
        @Html.ValidationSummary("Account creation was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null)
        <div class=" row">
            <div class="col-sm">
                <div class="card mt-5">
                    <div class="card-header">
                        <h2>Create an Account</h2>
                    </div>
                    <div class="card-body">
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label for="email" @if (!ModelState.IsValidField("email")) { <text> class="error-label" </text> }>Email Address:</label>
                                <input type="text" class="form-control" id="email" name="email" value="@email" @Validation.For("email") placeholder="">
                                @* Write any email validation errors to the page *@
                                @Html.ValidationMessage("email")
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label for="password" @if (!ModelState.IsValidField("password")) { <text> class="error-label" </text> }>Password:</label>
                                <input type="password" class="form-control" id="password" name="password" value="@password" @Validation.For("password") placeholder="">
                                @* Write any password validation errors to the page *@
                                @Html.ValidationMessage("password")
                            </div>
                        </div>
                        <div class=" form-row">
                            <button type="submit" class="btn btn-danger" id="CreatAccountSubmit" value="submit">Create</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>
